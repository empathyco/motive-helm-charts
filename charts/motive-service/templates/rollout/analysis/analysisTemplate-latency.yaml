# Latency Analysis: This analysis checks the latency of the service during the rollout.
# It uses a Prometheus provider to query a Prometheus server for metrics related to the service's latency.
# The success conditions for the metrics are defined using expressions that check the results of the Prometheus queries.

{{- if and .Values.rollouts.enabled .Values.rollouts.analysis.promotionAnalysis.latency.enabled }}
apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: {{ include "motive-service.fullname" $ }}-latency
spec:
  args:
    - name: latency_ingress
    - name: latency_slo

  measurementRetention:
    - metricName: .*
      limit: 6

  metrics:
    - name: {{ include "motive-service.fullname" . }}-latency-burnrate5m
      {{- if .Values.rollouts.analysis.promotionAnalysis.latency.initialDelay }}
      initialDelay: {{ .Values.rollouts.analysis.promotionAnalysis.latency.initialDelay  }}
      {{- end }}
      interval: {{ .Values.rollouts.analysis.promotionAnalysis.latency.interval  }}
      # NOTE: prometheus queries return results in the form of a vector.
      # So it is common to access the index 0 of the returned array to obtain the value
      {{- if .Values.rollouts.analysis.promotionAnalysis.latency.nanSuccessful }}
      successCondition: len(result) == 0 || isNaN(result[0]) || result[0] <= (14 * (1 - 0.99))
      {{- else }}
      successCondition: len(result) == 0 || result[0] <= (14 * (1 - 0.99))
      {{- end }}

      failureLimit: {{ .Values.rollouts.analysis.promotionAnalysis.latency.failureLimit }}
      count: {{ .Values.rollouts.analysis.promotionAnalysis.latency.count  }}
      provider:
        prometheus:
          address: {{ .Values.rollouts.analysis.promotionAnalysis.latency.prometheusAddress | required "prometheusAddress is required" }}
          query: |
            nginx_ingress_controller_request_duration_seconds:burnrate5m{ingress="{{`{{args.latency_ingress}}`}}", canary=~".+", slo="{{`{{args.latency_slo}}`}}"}

    - name: {{ include "motive-service.fullname" . }}-latency-burnrate1h
      {{- if .Values.rollouts.analysis.promotionAnalysis.latency.initialDelay }}
      initialDelay: {{ .Values.rollouts.analysis.promotionAnalysis.latency.initialDelay  }}
      {{- end }}
      interval: {{ .Values.rollouts.analysis.promotionAnalysis.latency.interval  }}
      # NOTE: prometheus queries return results in the form of a vector.
      # So it is common to access the index 0 of the returned array to obtain the value
      {{- if .Values.rollouts.analysis.promotionAnalysis.latency.nanSuccessful }}
      successCondition: len(result) == 0 || isNaN(result[0]) || result[0] <= (14 * (1 - 0.99))
      {{- else }}
      successCondition: len(result) == 0 || result[0] <= (14 * (1 - 0.99))
      {{- end}}

      failureLimit: {{ .Values.rollouts.analysis.promotionAnalysis.latency.failureLimit }}
      count: {{ .Values.rollouts.analysis.promotionAnalysis.latency.count  }}
      provider:
        prometheus:
          address: {{ .Values.rollouts.analysis.promotionAnalysis.latency.prometheusAddress | required "prometheusAddress is required" }}
          query: |
            nginx_ingress_controller_request_duration_seconds:burnrate1h{ingress="{{`{{args.latency_ingress}}`}}", canary=~".+", slo="{{`{{args.latency_slo}}`}}"}
{{- end }}